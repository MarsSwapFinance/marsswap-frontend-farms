{"version":3,"sources":["hooks/useWeb3.ts","hooks/useContract.ts","components/UnlockButton.tsx","hooks/useMirrorData.ts","utils/formatPrices.tsx","components/TickerBar.tsx","config/constants/index.ts"],"names":["RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useCake","getCakeAddress","erc20","useLottery","lottery","getLotteryAddress","useMasterplanet","masterPlanet","getMasterPlanetAddress","useReferralContract","referral","geReferralContractAddress","useSousChef","id","config","poolsConfig","find","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","useMirrorData","data","setData","loading","setLoading","error","setError","yesterday","Date","setDate","getDate","fetch","method","headers","body","JSON","stringify","query","getTime","then","r","json","res","catch","err","finally","formatPriceChange","priceNow","priceBefore","change","Number","style","color","roundNumber","input","roundDecimals","Math","round","TickerBar","isLight","useTheme","assets","marginBottom","whiteSpace","filter","asset","prices","oraclePrice","map","marginLeft","symbol","oraclePriceAt","farmsConfig","farm","isCommunity","tokenSymbol"],"mappings":"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","file":"static/js/0.71ce3ed2.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import erc20 from 'config/abi/erc20.json'\nimport ifo from 'config/abi/ifo.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterPlanet from 'config/abi/masterplanet.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport referral from 'config/abi/referral.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useEffect, useState } from 'react'\nimport { geReferralContractAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress, getMasterPlanetAddress } from 'utils/addressHelpers'\nimport { ContractOptions } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterplanet = () => {\n  const abi = (masterPlanet as unknown) as AbiItem\n  return useContract(abi, getMasterPlanetAddress())\n}\n\nexport const useReferralContract = () => {\n  const abi = (referral as unknown) as AbiItem\n  return useContract(abi, geReferralContractAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useEffect, useState } from \"react\"\n\nconst useMirrorData = () => {\n  const [data, setData] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const yesterday = new Date()\n    yesterday.setDate(yesterday.getDate() - 1)\n    fetch('https://graph.mirror.finance/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `\n        {\n          assets {\n            symbol\n            name\n            prices {\n              oraclePrice\n              oraclePriceAt(timestamp: ${yesterday.getTime()})\n            }\n          }\n        }\n        `\n      })\n    })\n      .then(r => r.json())\n      .then(res => setData(res.data))\n      .catch(err => setError(err))\n      .finally(() => setLoading(false))\n  }, [])\n\n  return {\n    data,\n    loading,\n    error\n  }\n}\n\nexport default useMirrorData\n","import React from 'react'\n\nexport const formatPriceChange = (priceNow: number, priceBefore: number) => {\n  const change = ((Number(priceNow) - Number(priceBefore)) * 100) / Number(priceBefore)\n  return <span style={{ color: change > 0 ? 'green' : 'red' }}>{change > 0 ? '+' : ''}{roundNumber(change, 2)}%</span>\n}\n\nexport const roundNumber = (input: number, roundDecimals: number) => {\n  return Math.round(input * 10 ** roundDecimals) / 10 ** roundDecimals\n}\n\nexport default {}\n","import React from 'react'\nimport Ticker from 'react-ticker'\nimport useMirrorData from 'hooks/useMirrorData'\nimport { formatPriceChange } from 'utils/formatPrices';\nimport useTheme from 'hooks/useTheme';\n\nconst TickerBar = () => {\n  const { data } = useMirrorData()\n  const { isLight } = useTheme()\n\n  if (!data?.assets) {\n    return <div style={{ marginBottom: 48 }}/>\n  }\n\n  return (\n    <div style={{ marginBottom: 32 }}>\n      <p style={{ whiteSpace: 'nowrap', color: isLight ? 'black' : 'white' }}>\n        <Ticker>\n          {() => \n            data.assets\n              .filter(asset => !!asset.prices.oraclePrice)\n              .map(asset => \n                <span style={{ marginLeft: 18 }}>\n                  <strong>{asset.symbol}</strong> {formatPriceChange(asset.prices.oraclePrice, asset.prices.oraclePriceAt)}\n                </span>\n              )\n          }\n        </Ticker>\n      </p>\n    </div>\n  )\n}\n\nexport default TickerBar\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n"],"sourceRoot":""}