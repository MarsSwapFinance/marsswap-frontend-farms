{"version":3,"sources":["state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","contexts/ThemeContext.tsx","state/actions.ts","hooks/useRefresh.ts","hooks/useI18n.ts","components/layout/Container.tsx","components/layout/Page.tsx","hooks/useTheme.ts","utils/translateTextHelpers.ts","utils/multicall.ts","config/constants/contracts.ts","utils/addressHelpers.ts","config/constants/types.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","views/Nft/components/NftGlobalNotification.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/web3.ts","contexts/Localisation/translationsContext.ts"],"names":["ZERO","BigNumber","useFetchPublicData","dispatch","useDispatch","slowRefresh","useRefresh","useEffect","fetchFarmsPublicDataAsync","fetchBnbPrice","useFarms","useSelector","state","farms","data","useFarmFromPid","pid","find","f","useFarmUser","farm","allowance","userData","tokenBalance","stakedBalance","earnings","usePriceBnbBusd","bnbPrice","usePriceMarsBusd","marsBnbFarm","bnbBusdPrice","tokenPriceVsQuote","times","useTotalValue","marsPrice","value","i","length","lpTotalInQuoteToken","val","quoteTokenSymbol","QuoteToken","BNB","MARS","toNumber","plus","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","a","prev","clearInterval","Provider","CACHE_KEY","ThemeContext","isLight","toggleTheme","ThemeContextProvider","isLightUserSetting","localStorage","getItem","JSON","parse","setIsLight","prevState","setItem","stringify","theme","light","dark","useContext","fastRefresh","useI18n","translations","TranslationsContext","translationId","fallback","getTranslation","Container","styled","div","mediaQueries","sm","Page","lg","useTheme","StyledThemeCopntext","variableRegex","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","TranslateString","multicall","abi","calls","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","methods","aggregate","returnData","res","decodeFunctionResult","cake","config","token","masterPlanet","referral","wbnb","56","97","lottery","lotteryNFT","mulltiCall","busd","ust","mamzn","getCakeAddress","addresses","chainId","getMasterPlanetAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","geReferralContractAddress","PoolCategory","pools","nonBnbPools","poolsConfig","filter","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterPlanetContract","masterPlanetABI","fetchPoolsAllowance","account","stakingTokenAddress","contractAddress","CHAIN_ID","erc20ABI","allowances","reduce","acc","pool","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","_hex","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingMars","pendingReward","initialState","PoolsSlice","createSlice","reducers","setPoolsPublicData","action","livePoolsData","payload","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","actions","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","REACT_APP_CROWDIN_APIKEY","setTranslations","storedLangCode","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","label","icon","href","items","Menu","props","useWallet","connect","reset","marsPriceUsd","login","logout","isDark","currentLang","langs","setLang","cakePriceUsd","links","priceLink","Wrapper","PageLoader","ModalContent","Actions","NftYouWonModal","onDismiss","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","useRef","Home","lazy","Farms","NotFound","Referrals","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","ref","URLSearchParams","location","search","get","basename","Global","path","exact","stocksMode","component","memo","BlockContext","BlockContextProvider","previousBlock","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","fetchFarms","Promise","all","farmsConfig","lpAddresses","farmConfig","lpAdress","tokenAddresses","quoteTokenAdresses","isTokenOnly","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","pow","tokenSymbol","BUSD","lpTokenRatio","quoteTokenAmount","comparedTo","masterplanetABI","info","totalAllocPoint","marsPerBlock","allocPoint","poolWeight","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","masterPlanetAdress","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","fetchFarmUserEarnings","rawEarnings","parsedEarnings","farmsSlice","setFarmsPublicData","liveFarmsData","liveFarmData","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","setBnbPrice","Math","round","price","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState"],"mappings":"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","file":"static/js/main.b8573ad3.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport useRefresh from 'hooks/useRefresh'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { QuoteToken } from '../config/constants/types'\nimport { fetchFarmsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { fetchBnbPrice } from './farms'\nimport { Farm, Pool, State } from './types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchBnbPrice())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const bnbPrice = useSelector((state: State) => state.farms.bnbPrice)\n  return bnbPrice\n}\n\nexport const usePriceMarsBusd = (): BigNumber => {\n  const marsBnbFarm = useFarmFromPid(0)\n  const bnbBusdPrice = usePriceBnbBusd()\n  return marsBnbFarm?.tokenPriceVsQuote && bnbBusdPrice ? bnbBusdPrice.times(marsBnbFarm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const marsPrice = usePriceMarsBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      } else if (farm.quoteTokenSymbol === QuoteToken.MARS) {\n        val = (marsPrice.times(farm.lpTotalInQuoteToken));\n      } else {\n        val = (farm.lpTotalInQuoteToken);\n      }\n      if (val?.toNumber()) {\n        value = value.plus(val);\n      }\n    }\n  }\n  return value;\n}","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_LIGHT'\n\nconst ThemeContext = React.createContext({ isLight: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isLight, setIsLight] = useState(() => {\n    const isLightUserSetting = localStorage.getItem(CACHE_KEY)\n    return isLightUserSetting ? JSON.parse(isLightUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsLight((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isLight, toggleTheme }}>\n      <SCThemeProvider theme={isLight ? light : dark}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import React from 'react'\nimport styled from 'styled-components'\nimport TickerBar from 'components/TickerBar'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import { ThemeContext } from 'contexts/ThemeContext'\nimport { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\n\nconst useTheme = () => {\n  const { isLight, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isLight, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import config from 'frontend-config.json'\n\nexport default {\n  cake: config.token,\n  masterPlanet: config.masterPlanet,\n  referral: config.referral,\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '0xed24fc36d5ee211ea25a80239fb8c4cfd80f12ee',\n  },\n  ust: {\n    56: '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',\n    97: '0x66BDf3Bd407A63eAB5eAF5eCE69f2D7bb403EfC9',\n  },\n  mamzn: {\n    56: '0x3947B992DC0147D2D89dF0392213781b04B25075',\n    97: '0xfBC94545AD2ff3F7B009258FB43F2EAb46744767',\n  },\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterPlanetAddress = () => {\n  return addresses.masterPlanet[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\nexport const geReferralContractAddress = () => {\n  return addresses.referral[chainId]\n}\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'MARS' = 'MARS',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'MAMZN' = 'MAMZN',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: string\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isStock?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: string\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterPlanetABI from 'config/abi/masterplanet.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport poolsConfig from 'config/constants/pools'\nimport { QuoteToken } from 'config/constants/types'\nimport { getMasterPlanetAddress } from 'utils/addressHelpers'\nimport multicall from 'utils/multicall'\nimport { getWeb3 } from 'utils/web3'\nimport { AbiItem } from 'web3-utils'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterPlanetContract = new web3.eth.Contract((masterPlanetABI as unknown) as AbiItem, getMasterPlanetAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterPlanetContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterPlanetContract.methods.pendingMars('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import config from 'frontend-config.json'\nimport { FarmConfig } from './types'\n\nconst { farms } = config\nexport default farms as FarmConfig[]\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\nimport frontendConfig from 'frontend-config.json'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: \"Trade\",\n    icon: \"TradeIcon\",\n    items: [\n      {\n        label: \"Exchange\",\n        href: \"https://exchange.marsswap.finance/swap\",\n      },\n      {\n        label: \"Liquidity\",\n        href: \"https://exchange.marsswap.finance/pool\",\n      },\n    ],\n  },\n  {\n    label: 'MARS',\n    icon: 'FarmIcon',\n    href: '/mars',\n  },\n  {\n    label: 'Stocks',\n    icon: 'StocksIcon',\n    href: '/stocks',\n  },\n  {\n    label: 'Referrals',\n    icon: 'GroupsIcon',\n    href: '/referrals',\n  },\n  {\n    label: 'Roadmap',\n    icon: 'RoadmapIcon',\n    href: 'https://docs.marsswap.finance/roadmap',\n  },\n  {\n    label: 'Audits',\n    icon: 'AuditIcon',\n    items: [\n      {\n        label: 'RD Auditors',\n        href: 'https://marsswap.finance/audits/rdauditors.pdf'\n      },\n      {\n        label: 'Techrate',\n        href: 'https://marsswap.finance/audits/techrate.pdf'\n      }\n    ]\n  },\n  // {\n  //   label: 'Info',\n  //   icon: 'InfoIcon',\n  //   items: [\n  //     {\n  //       label: 'PancakeSwap',\n  //       href: `https://pancakeswap.info/token/${frontendConfig.token['56']}`,\n  //     },\n  //   ],\n  // },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Github',\n        href: 'https://github.com/MarsSwapFinance',\n      },\n      {\n        label: 'Docs',\n        href: 'https://docs.marsswap.finance/',\n      },\n      {\n        label: 'Blog',\n        href: 'https://medium.com/marsswap',\n      },\n      {\n        label: 'Whitepaper',\n        href: 'https://marsswap.finance/whitepaper.pdf',\n      },\n    ],\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceMarsBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isLight, toggleTheme } = useTheme()\n  const marsPriceUsd = usePriceMarsBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={!isLight}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={marsPriceUsd.toNumber()}\n      links={config}\n      priceLink=\"\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, useRef } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\n\ninterface NftYouWonModalProps {\n  onDismiss?: () => void\n}\n\nconst ModalContent = styled.div`\n  padding: 24px;\n  text-align: center;\n`\n\nconst Actions = styled.div`\n  text-align: center;\n`\n\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n  return (\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\n      <ModalContent>\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\n        <Heading size=\"lg\" color=\"secondary\">\n          {TranslateString(999, 'You won an NFT!')}\n        </Heading>\n      </ModalContent>\n      <Actions>\n        <Button as=\"a\" href=\"/nft\">\n          {TranslateString(999, 'Go to claim NFT')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\n/**\n * 1. Checks if nft supply available\n * 2. If supply is available check if the user can claim\n * 3. If the user can claim show a modal\n */\nconst NftGlobalNotification = () => {\n  const { account } = useWallet()\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\n  const showModal = useRef(() => onPresentBurnModal())\n\n  // useEffect(() => {\n  //   const checkNftStatus = async () => {\n  //     const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\n  //       rabbitmintingfarm,\n  //       [\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\n  //         { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\n  //       ],\n  //     )\n\n  //     // TODO: Figure out why these values are coming back as an array\n  //     const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n  //     const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n  //     const [canClaim]: [boolean] = canClaimArr\n  //     const [hasClaimed]: [boolean] = hasClaimedArr\n\n  //     if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\n  //       showModal.current()\n  //     }\n  //   }\n\n  //   if (account && !document.location.href.includes('/nft')) {\n  //     checkNftStatus()\n  //   }\n  // }, [account, showModal])\n\n  return <div />\n}\n\nexport default NftGlobalNotification\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\nconst Referrals = lazy(() => import('./views/Referrals'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  // Save referral url\n  useEffect(() => {\n    const ref = new URLSearchParams(window.location.search).get('ref')\n    if (ref) {\n      localStorage.setItem('ref', ref)\n    }\n  }, [])\n\n  useFetchPublicData()\n\n  return (\n    <Router basename=\"/\">\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/mars\">\n              <Farms />\n            </Route>\n            <Route path=\"/stocks\">\n              <Farms stocksMode />\n            </Route>\n            <Route path=\"/referrals\">\n              <Referrals />\n            </Route>\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      <NftGlobalNotification />\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterplanetABI from 'config/abi/masterplanet.json'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterPlanetAddress } from 'utils/addressHelpers'\nimport multicall from 'utils/multicall'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.filter(farm => farm.lpAddresses[CHAIN_ID]).map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterPlanetAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1);\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, marsPerBlock] = await multicall(masterplanetABI, [\n        {\n          address: getMasterPlanetAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterPlanetAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterPlanetAddress(),\n          name: 'marsPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        marsPerBlock: new BigNumber(marsPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterplanetABI from 'config/abi/masterplanet.json'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterPlanetAddress } from 'utils/addressHelpers'\nimport multicall from 'utils/multicall'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterPlanetAdress = getMasterPlanetAddress()\n\n  const calls = farmsConfig.filter(farm => farm.lpAddresses[CHAIN_ID]).map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterPlanetAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.filter(farm => farm.lpAddresses[CHAIN_ID]).map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterPlanetAdress = getMasterPlanetAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterPlanetAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterplanetABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterPlanetAdress = getMasterPlanetAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterPlanetAdress,\n      name: 'pendingMars',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterplanetABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport BigNumber from 'bignumber.js'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig], bnbPrice: null }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n    setBnbPrice: (state, action) => {\n      return {\n        ...state,\n        bnbPrice: action.payload ? new BigNumber(Math.round(action.payload)) : null\n      }\n    }\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData, setBnbPrice } = farmsSlice.actions\n\n// Thunks\nexport const fetchBnbPrice = () => async (dispatch) => {\n  const res = await fetch('https://api.pancakeswap.info/api/v2/tokens/0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c')\n  const data = await res.json()\n  const price = data.data.price\n  dispatch(setBnbPrice(price))\n}\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n"],"sourceRoot":""}