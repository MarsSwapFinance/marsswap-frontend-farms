{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","hooks/useHarvest.ts","utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterPlanetContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","getReferralAddress","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","referralAddress","localStorage","getItem","length","config","referral","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterplanet","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","getContract","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","call","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterPlanetAddress","name","params","multicall","masterPlanetABI","rawResults","results","index","fetchBalances","CardValue","fontSize","prefix","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","setBalance","ethereum","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","Label","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","marsBalance","getCakeAddress","marsPrice","usePriceMarsBusd","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","id","disabled","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","marsPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","theme","useTheme","dataSource","sourceType","screenName","height","chrome","width","isDark","dnt","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","img","useContext","ThemeContext","Page","TickerBar","as","src","alt","marginBottom","href","FarmStakingCard"],"mappings":"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","file":"static/js/10.62d40848.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport config from 'frontend-config.json'\n\nexport const approve = async (lpContract, masterPlanetContract, account) => {\n  return lpContract.methods\n    .approve(masterPlanetContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterPlanetContract, pid, amount, account) => {\n  return masterPlanetContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), getReferralAddress())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), getReferralAddress())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterPlanetContract, pid, amount, account) => {\n  return masterPlanetContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterPlanetContract, pid, account) => {\n  return masterPlanetContract.methods\n    .deposit(pid, '0', getReferralAddress())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst getReferralAddress = () => {\n  const referralAddress = localStorage.getItem('ref')\n  return referralAddress && referralAddress.length === 42 ? referralAddress : config.referral['56']\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterplanet, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterPlanetContract = useMasterplanet()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterPlanetContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterPlanetContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterPlanetContract = useMasterplanet()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterPlanetContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterPlanetContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterPlanetContract = useMasterplanet()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterPlanetContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterPlanetContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterPlanetContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterPlanetContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport masterPlanetABI from 'config/abi/masterplanet.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport { useEffect, useState } from 'react'\nimport { getMasterPlanetAddress } from 'utils/addressHelpers'\nimport multicall from 'utils/multicall'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterPlanetAddress(),\n        name: 'pendingMars',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterPlanetABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix, color }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize} color={color}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"white\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'LOCKED')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"white\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'LOCKED')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport masterPlanetABI from 'config/abi/masterplanet.json'\nimport { farmsConfig } from 'config/constants'\nimport { useEffect, useState } from 'react'\nimport { getMasterPlanetAddress } from 'utils/addressHelpers'\nimport multicall from 'utils/multicall'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterPlanetAddress(),\n        name: 'pendingMars',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterPlanetABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceMarsBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/mars/mars-512px.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: white;\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 70px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const marsBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const marsPrice = usePriceMarsBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <Block>\n          <Label>{TranslateString(544, 'MARS to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(marsPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'MARS in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={marsBalance} />\n          <Label>~${(marsPrice * marsBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting MARS')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceMarsBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const marsPrice = usePriceMarsBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = marsPrice.times(circSupply);\n\n  let marsPerBlock = 0;\n  if(farms && farms[0] && farms[0].marsPerBlock){\n    marsPerBlock = new BigNumber(farms[0].marsPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'MARS Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New MARS/block')}</Text>\n          <Text bold fontSize=\"14px\">{marsPerBlock}</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled, { useTheme } from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n  const theme = useTheme()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'marsswap'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\",\n            theme: theme.isDark ? 'dark' : 'light',\n            dnt: true\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport TickerBar from 'components/TickerBar'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CardImage = styled.img`\n  margin-right: 12px;\n  margin-bottom: 6px;\n  vertical-align: middle;\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n  const { isDark } = useContext(ThemeContext);\n\n  return (\n    <Page>\n      <TickerBar />\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {\n            isDark ? <img src=\"/images/marsswap.png\" alt=\"MARS logo\" /> : <img src=\"/images/marsswap-light.png\" alt=\"MARS logo\" />\n          }\n        </Heading>\n        <Text>{TranslateString(578, 'AMM and yield farm for Mirror tokens on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <div style={{ marginBottom: 64 }}><a href=\"https://igo.finance/bsc/0x8F86a822225fe5f2616cDF96697B15e8de005fB5\"><img src=\"/images/presale.gif\" alt=\"MARS Presale\" /></a></div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}